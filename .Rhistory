expr[ .> med_var, ]
lnc_var <-  apply(expr, 1, var)
med_var <- median(lnc_var)
sel_lnc <- lnc_var >= med_var
pheatmap(expr[sel_lnc, ], annotation_col = sample_ann,
show_rownames = F,
clustering_method = clust_meth,
clustering_distance_rows = row_dist,
clustering_distance_cols = col_dist,
annotation_colors = ann_colors,
scale=scale)
pheatmap(expr[sel_lnc, ], annotation_col = sample_ann,
show_rownames = F,
clustering_method = clust_meth,
clustering_distance_rows = row_dist,
clustering_distance_cols = col_dist,
annotation_colors = ann_colors,
scale=scale)
pheatmap(expr[sel_lnc, ], annotation_col = sample_ann,
show_rownames = F,
clustering_method = clust_meth,
clustering_distance_rows = row_dist,
clustering_distance_cols = col_dist,
annotation_colors = ann_colors,
scale=scale)
dat_subset <- merged %>%
filter(hist.tissue_desc == "skin_dat_subset")
dat_subset <- droplevels(dat_subset)
expr <- as.matrix(dat_subset[,!colnames(merged)%in%colnames(patient)])
expr <- expr[, !grepl("NEG|POS", colnames(expr))]
rownames(expr) <- dat_subset$assay.lncrna_nano_gnomex_1
expr <- as.data.frame(t(expr))
# Drop zero count lncs
expr <- expr[rowSums(expr)!= 0 , ]
# Prepare sample annotation
sel_cols <- c("assay.lncrna_nano_gnomex_1",
"shadow_id",
"hist.til_score",
"clin.resp_class")
sample_ann <- dat_subset[, colnames(dat_subset) %in% sel_cols]
rownames(sample_ann) <- sample_ann$assay.lncrna_nano_gnomex_1
sample_ann <- data.frame(select(sample_ann, -assay.lncrna_nano_gnomex_1))
suppressPackageStartupMessages(library(pheatmap))
################## semi-automated coloring #######################
# ann_var <- c("shadow_id",
#               "hist.til_score",
#               "clin.resp_class")
#
#
# ann_colors <- ann_coloring(sample_ann,
#                            vars_to_pull = ann_var)
##################################################################
ann_colors <- list(clin.resp_class = c("gray50", "orange"),
shadow_id = qualitative_hcl(length(levels(prim$shadow_id)), h=c(0,250), l = 75),
hist.til_score = brewer.pal(length(levels(prim$hist.til_score)), "Reds"))
ann_colors <- ann_coloring(sample_ann, ann_list = ann_colors)
clust_meth <- "complete"
row_dist <- "euclidean"
col_dist <- "euclidean"
scale <- "row"
pheatmap(expr, annotation_col = sample_ann,
show_rownames = F,
clustering_method = clust_meth,
clustering_distance_rows = row_dist,
clustering_distance_cols = col_dist,
annotation_colors = ann_colors,
scale=scale)
dat_subset <- merged %>%
filter(hist.tissue_desc == "skin_dat_subset")
dat_subset <- droplevels(dat_subset)
expr <- as.matrix(dat_subset[,!colnames(merged)%in%colnames(patient)])
expr <- expr[, !grepl("NEG|POS", colnames(expr))]
rownames(expr) <- dat_subset$assay.lncrna_nano_gnomex_1
expr <- as.data.frame(t(expr))
# Drop zero count lncs
expr <- expr[rowSums(expr)!= 0 , ]
# Prepare sample annotation
sel_cols <- c("assay.lncrna_nano_gnomex_1",
"shadow_id",
"hist.til_score",
"clin.resp_class")
sample_ann <- dat_subset[, colnames(dat_subset) %in% sel_cols]
rownames(sample_ann) <- sample_ann$assay.lncrna_nano_gnomex_1
sample_ann <- data.frame(select(sample_ann, -assay.lncrna_nano_gnomex_1))
suppressPackageStartupMessages(library(pheatmap))
################## semi-automated coloring #######################
# ann_var <- c("shadow_id",
#               "hist.til_score",
#               "clin.resp_class")
#
#
# ann_colors <- ann_coloring(sample_ann,
#                            vars_to_pull = ann_var)
##################################################################
ann_colors <- list(clin.resp_class = c("gray50", "orange"),
shadow_id = qualitative_hcl(length(levels(prim$shadow_id)), h=c(0,250), l = 75),
hist.til_score = brewer.pal(length(levels(prim$hist.til_score)), "Reds"))
ann_colors <- ann_coloring(sample_ann, ann_list = ann_colors)
clust_meth <- "complete"
row_dist <- "euclidean"
col_dist <- "euclidean"
scale <- "row"
pheatmap(expr, annotation_col = sample_ann,
show_rownames = F,
clustering_method = clust_meth,
clustering_distance_rows = row_dist,
clustering_distance_cols = col_dist,
annotation_colors = ann_colors,
scale=scale)
dat_subset <- merged %>%
filter(hist.tissue_desc == "skin_dat_subset")
dat_subset <- merged %>%
filter(hist.tissue_desc == "skin_prim")
dat_subset <- droplevels(dat_subset)
expr <- as.matrix(dat_subset[,!colnames(merged)%in%colnames(patient)])
expr <- expr[, !grepl("NEG|POS", colnames(expr))]
rownames(expr) <- dat_subset$assay.lncrna_nano_gnomex_1
expr <- as.data.frame(t(expr))
# Drop zero count lncs
expr <- expr[rowSums(expr)!= 0 , ]
# Prepare sample annotation
sel_cols <- c("assay.lncrna_nano_gnomex_1",
"shadow_id",
"hist.til_score",
"clin.resp_class")
sample_ann <- dat_subset[, colnames(dat_subset) %in% sel_cols]
rownames(sample_ann) <- sample_ann$assay.lncrna_nano_gnomex_1
sample_ann <- data.frame(select(sample_ann, -assay.lncrna_nano_gnomex_1))
suppressPackageStartupMessages(library(pheatmap))
################## semi-automated coloring #######################
# ann_var <- c("shadow_id",
#               "hist.til_score",
#               "clin.resp_class")
#
#
# ann_colors <- ann_coloring(sample_ann,
#                            vars_to_pull = ann_var)
##################################################################
ann_colors <- list(clin.resp_class = c("gray50", "orange"),
shadow_id = qualitative_hcl(length(levels(prim$shadow_id)), h=c(0,250), l = 75),
hist.til_score = brewer.pal(length(levels(prim$hist.til_score)), "Reds"))
ann_colors <- ann_coloring(sample_ann, ann_list = ann_colors)
clust_meth <- "complete"
row_dist <- "euclidean"
col_dist <- "euclidean"
scale <- "row"
pheatmap(expr, annotation_col = sample_ann,
show_rownames = F,
clustering_method = clust_meth,
clustering_distance_rows = row_dist,
clustering_distance_cols = col_dist,
annotation_colors = ann_colors,
scale=scale)
##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### #####
lnc_var <-  apply(expr, 1, var)
med_var <- median(lnc_var)
sel_lnc <- lnc_var >= med_var
pheatmap(expr[sel_lnc, ], annotation_col = sample_ann,
show_rownames = F,
clustering_method = clust_meth,
clustering_distance_rows = row_dist,
clustering_distance_cols = col_dist,
annotation_colors = ann_colors,
scale=scale)
dat_subset <- merged %>%
filter(hist.tissue_desc == "ln_met")
dat_subset <- droplevels(dat_subset)
expr <- as.matrix(dat_subset[,!colnames(merged)%in%colnames(patient)])
expr <- expr[, !grepl("NEG|POS", colnames(expr))]
rownames(expr) <- dat_subset$assay.lncrna_nano_gnomex_1
expr <- as.data.frame(t(expr))
# Drop zero count lncs
expr <- expr[rowSums(expr)!= 0 , ]
# Prepare sample annotation
sel_cols <- c("assay.lncrna_nano_gnomex_1",
"shadow_id",
"hist.til_score",
"clin.resp_class")
sample_ann <- dat_subset[, colnames(dat_subset) %in% sel_cols]
rownames(sample_ann) <- sample_ann$assay.lncrna_nano_gnomex_1
sample_ann <- data.frame(select(sample_ann, -assay.lncrna_nano_gnomex_1))
suppressPackageStartupMessages(library(pheatmap))
################## semi-automated coloring #######################
# ann_var <- c("shadow_id",
#               "hist.til_score",
#               "clin.resp_class")
#
#
# ann_colors <- ann_coloring(sample_ann,
#                            vars_to_pull = ann_var)
##################################################################
ann_colors <- list(clin.resp_class = c("gray50", "orange"),
shadow_id = qualitative_hcl(length(levels(dat_subset$shadow_id)), h=c(0,250), l = 70),
hist.til_score = brewer.pal(length(levels(dat_subset$hist.til_score)), "Reds"))
ann_colors <- ann_coloring(sample_ann, ann_list = ann_colors)
clust_meth <- "complete"
row_dist <- "euclidean"
col_dist <- "euclidean"
scale <- "row"
pheatmap(expr, annotation_col = sample_ann,
show_rownames = F,
clustering_method = clust_meth,
clustering_distance_rows = row_dist,
clustering_distance_cols = col_dist,
annotation_colors = ann_colors,
scale=scale)
##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### #####
lnc_var <-  apply(expr, 1, var)
med_var <- median(lnc_var)
sel_lnc <- lnc_var >= med_var
pheatmap(expr[sel_lnc, ], annotation_col = sample_ann,
show_rownames = F,
clustering_method = clust_meth,
clustering_distance_rows = row_dist,
clustering_distance_cols = col_dist,
annotation_colors = ann_colors,
scale=scale)
dat_subset <- merged %>%
filter(grepl("met", hist.tissue_desc))
dat_subset <- droplevels(dat_subset)
expr <- as.matrix(dat_subset[,!colnames(merged)%in%colnames(patient)])
expr <- expr[, !grepl("NEG|POS", colnames(expr))]
rownames(expr) <- dat_subset$assay.lncrna_nano_gnomex_1
expr <- as.data.frame(t(expr))
# Drop zero count lncs
expr <- expr[rowSums(expr)!= 0 , ]
# Prepare sample annotation
sel_cols <- c("assay.lncrna_nano_gnomex_1",
"shadow_id",
"hist.til_score",
"clin.resp_class")
sample_ann <- dat_subset[, colnames(dat_subset) %in% sel_cols]
rownames(sample_ann) <- sample_ann$assay.lncrna_nano_gnomex_1
sample_ann <- data.frame(select(sample_ann, -assay.lncrna_nano_gnomex_1))
suppressPackageStartupMessages(library(pheatmap))
################## semi-automated coloring #######################
# ann_var <- c("shadow_id",
#               "hist.til_score",
#               "clin.resp_class")
#
#
# ann_colors <- ann_coloring(sample_ann,
#                            vars_to_pull = ann_var)
##################################################################
ann_colors <- list(clin.resp_class = c("gray50", "orange"),
shadow_id = sample(qualitative_hcl(length(levels(dat_subset$shadow_id)), h=c(0,325), l = 65)),
hist.til_score = brewer.pal(length(levels(dat_subset$hist.til_score)), "Reds"))
ann_colors <- ann_coloring(sample_ann, ann_list = ann_colors)
clust_meth <- "complete"
row_dist <- "euclidean"
col_dist <- "euclidean"
scale <- "row"
pheatmap(expr, annotation_col = sample_ann,
show_rownames = F,
clustering_method = clust_meth,
clustering_distance_rows = row_dist,
clustering_distance_cols = col_dist,
annotation_colors = ann_colors,
scale=scale)
##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### #####
lnc_var <-  apply(expr, 1, var)
med_var <- median(lnc_var)
sel_lnc <- lnc_var >= med_var
pheatmap(expr[sel_lnc, ], annotation_col = sample_ann,
show_rownames = F,
clustering_method = clust_meth,
clustering_distance_rows = row_dist,
clustering_distance_cols = col_dist,
annotation_colors = ann_colors,
scale=scale)
dat_subset <- merged %>%
filter(grepl("uninv", hist.tissue_desc))
dat_subset <- droplevels(dat_subset)
expr <- as.matrix(dat_subset[,!colnames(merged)%in%colnames(patient)])
expr <- expr[, !grepl("NEG|POS", colnames(expr))]
rownames(expr) <- dat_subset$assay.lncrna_nano_gnomex_1
expr <- as.data.frame(t(expr))
# Drop zero count lncs
expr <- expr[rowSums(expr)!= 0 , ]
# Prepare sample annotation
sel_cols <- c("assay.lncrna_nano_gnomex_1",
"shadow_id",
"hist.til_score",
"clin.resp_class")
sample_ann <- dat_subset[, colnames(dat_subset) %in% sel_cols]
rownames(sample_ann) <- sample_ann$assay.lncrna_nano_gnomex_1
sample_ann <- data.frame(select(sample_ann, -assay.lncrna_nano_gnomex_1))
suppressPackageStartupMessages(library(pheatmap))
################## semi-automated coloring #######################
# ann_var <- c("shadow_id",
#               "hist.til_score",
#               "clin.resp_class")
#
#
# ann_colors <- ann_coloring(sample_ann,
#                            vars_to_pull = ann_var)
##################################################################
ann_colors <- list(clin.resp_class = c("gray50", "orange"),
shadow_id = sample(qualitative_hcl(length(levels(dat_subset$shadow_id)), h=c(0,325), l = 65)),
hist.til_score = brewer.pal(length(levels(dat_subset$hist.til_score)), "Reds"))
ann_colors <- ann_coloring(sample_ann, ann_list = ann_colors)
clust_meth <- "complete"
row_dist <- "euclidean"
col_dist <- "euclidean"
scale <- "row"
pheatmap(expr, annotation_col = sample_ann,
show_rownames = F,
clustering_method = clust_meth,
clustering_distance_rows = row_dist,
clustering_distance_cols = col_dist,
annotation_colors = ann_colors,
scale=scale)
##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### #####
lnc_var <-  apply(expr, 1, var)
med_var <- median(lnc_var)
sel_lnc <- lnc_var >= med_var
pheatmap(expr[sel_lnc, ], annotation_col = sample_ann,
show_rownames = F,
clustering_method = clust_meth,
clustering_distance_rows = row_dist,
clustering_distance_cols = col_dist,
annotation_colors = ann_colors,
scale=scale)
suppressPackageStartupMessages(library(pheatmap))
################## semi-automated coloring #######################
# ann_var <- c("shadow_id",
#               "hist.til_score",
#               "clin.resp_class")
#
#
# ann_colors <- ann_coloring(sample_ann,
#                            vars_to_pull = ann_var)
##################################################################
ann_colors <- list(clin.resp_class = c("gray50", "orange"),
shadow_id = sample(qualitative_hcl(length(levels(dat_subset$shadow_id)), h=c(0,325), l = 65)),
hist.til_score = brewer.pal(length(levels(dat_subset$hist.til_score)), "Reds")[1:2])
ann_colors <- ann_coloring(sample_ann, ann_list = ann_colors)
clust_meth <- "complete"
row_dist <- "euclidean"
col_dist <- "euclidean"
scale <- "row"
pheatmap(expr, annotation_col = sample_ann,
show_rownames = F,
clustering_method = clust_meth,
clustering_distance_rows = row_dist,
clustering_distance_cols = col_dist,
annotation_colors = ann_colors,
scale=scale)
##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### #####
suppressPackageStartupMessages(library(pheatmap))
################## semi-automated coloring #######################
# ann_var <- c("shadow_id",
#               "hist.til_score",
#               "clin.resp_class")
#
#
# ann_colors <- ann_coloring(sample_ann,
#                            vars_to_pull = ann_var)
##################################################################
ann_colors <- list(clin.resp_class = c("gray50", "orange"),
shadow_id = sample(qualitative_hcl(length(levels(dat_subset$shadow_id)), h=c(0,325), l = 65)),
hist.til_score = brewer.pal(length(levels(dat_subset$hist.til_score)), "Reds")[2:3])
ann_colors <- ann_coloring(sample_ann, ann_list = ann_colors)
clust_meth <- "complete"
row_dist <- "euclidean"
col_dist <- "euclidean"
scale <- "row"
pheatmap(expr, annotation_col = sample_ann,
show_rownames = F,
clustering_method = clust_meth,
clustering_distance_rows = row_dist,
clustering_distance_cols = col_dist,
annotation_colors = ann_colors,
scale=scale)
##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### #####
.libPaths()
local({
# The directory where Pandoc will be extracted. Feel free
# to adjust this path as appropriate.
dir <- "C:/Users/ataka/.RLibrary"
# The version of Pandoc to be installed.
version <- "2.7.1"
# Create and move to the requested directory.
dir.create(dir, showWarnings = FALSE, recursive = TRUE)
owd <- setwd(dir)
on.exit(setwd(owd), add = TRUE)
# Construct path to pandoc.
root <- "https://s3.amazonaws.com/rstudio-buildtools"
suffix <- sprintf("pandoc-%s-windows-x86_64.zip", version)
url <- file.path(root, "pandoc-rstudio", version, suffix)
# Download and extract pandoc.
file <- basename(url)
utils::download.file(url, destfile = file)
utils::unzip(file)
unlink(file)
# Write .Renviron to update the version of Pandoc used.
entry <- paste("RSTUDIO_PANDOC", shQuote(path.expand(dir)), sep = " = ")
contents <- if (file.exists("~/.Renviron")) readLines("~/.Renviron")
filtered <- grep("^RSTUDIO_PANDOC", contents, value = TRUE, invert = TRUE)
amended <- union(filtered, entry)
writeLines(amended, "~/.Renviron")
# Report change to the user.
writeLines("Updated .Renviron:\n")
writeLines(amended)
writeLines("\nPlease restart RStudio for these changes to take effect.")
})
shiny::runApp('D:/OConnell_lab/R analyses/Shiny Apps/CIPR')
# v5 ====> copied from v4 and v3
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
reference_log <- readRDS("data/immgen_recalc_ratio.rds")
class(reference_log
)
ref_gene_column <<- grep("gene", colnames(reference), ignore.case = T, value = T)
reference <- readRDS("data/immgen.rds")
class(reference)
ref_gene_column <<- grep("gene", colnames(reference), ignore.case = T, value = T)
iris <- iris
iris["Sepal.Length"]
iris[,"Sepal.Length"]
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
user_data() -> a
colnames(a)
gene_column
runApp()
runApp()
runApp()
user_data()->a
runApp()
user_data() -> a
gene_column
dat_genes
dat_genes <- user_data()[gene_column] %>% pull() %>% as.character
dat_genes <- user_data()[gene_column]
runApp()
# v5 ====> copied from v4 and v3
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
immgen <- readRDS("data/immgen.rds")
reference_log <- readRDS("data/immgen_recalc_ratio.rds")
rm(immgen)
reference <- readRDS("data/immgen.rds")
var_df <- apply(reference, 1, var)
var_df <- apply(reference, 1, var, na.rm=T)
var_vec <- var_df
rm(var_df)
hist(var_vec)
hist(var_vec, 100)
var_vec_log <- apply(reference_log, 1, var, na.rm=T)
plot(var_vec, var_vec_log)
View(reference_log[1:10,1:10])
View(reference[1:10,1:10])
saveRDS(var_vec, "data/var_vec.rds")
shiny::runApp()
runApp()
runApp()
sum(var_vec < 0)
quantile(var_vec, 0)
quantile(var_vec, 100)
quantile(var_vec, 1)
max(var_vec)
min(var_vec)
runApp()
quantile(var_vec, 100, na.rm)
quantile(var_vec, 100, na.rm=T)
quantile(var_vec, 90/100, na.rm=T)
quantile(var_vec, 90/100, na.rm=T) -> a
keep_genes <- var_vec <= a
runApp()
runApp()
runApp()
a <- quantile(var_vec, 90)
a <- quantile(var_vec, 0.9)
b1 <- quantile(var_vec, 0.1)
sum(var_vec > a)
sum(var_vec > b1)
sum(var_vec <= b1)
sum(var_vec <= a)
sum(var_vec <= a)
sum(var_vec <= b1)
a <- quantile(var_vec, 90)
a <- quantile(var_vec, 0.9)
b <- quantile(var_vec, 0.1)
sum(var_vec >= a)
sum(var_vec >= b)
a
b
a <- quantile(var_vec, 1-0.9)
a <- quantile(var_vec, 1-0.1)
a <- quantile(var_vec, 1-0.9)
a <- quantile(var_vec, 1-0.1)
a <- quantile(var_vec, 1-0.9)
b <- quantile(var_vec, 1-0.1)
a
b
sum(var_vec >= a)
sum(var_vec >= b)
runApp()
runApp()
runApp()
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
reference_log <- readRDS("data/immgen_recalc_ratio.rds")
reference <- readRDS("data/immgen.rds")
var_vec_log <- apply(reference_log, 1, var, na.rm=T)
var_vec <- apply(reference, 1, var, na.rm=T)
a <- quantile(var_vec, 1-0.9)
b <- quantile(var_vec, 1-0.1)
sum(var_vec >= a)
sum(var_vec >= b)
shiny::runApp()
